package pkg3dsecure.Client;

import CertFile.CertFile;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import pkg3dsecure.ACS.authServer.ReponseAuth;
import pkg3dsecure.ACS.authServer.RequeteAuth;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Aurélien Bolkaerts
 */


public class ClientFrame extends javax.swing.JFrame {
    private final String clientFramePropertiesPath = "src\\pkg3dsecure\\Client\\ClientFrame.properties";
    //Variables lues dans le fichier ClientFrame.properties
    private String serverIP;
    private int port;
    private String certFileLocation;
    private String certFilePassword;
    private String certFileKeyPassword;
    
    private ObjectInputStream ois;
    private ObjectOutputStream oos;
    private Socket cliSock;
    
   public ClientFrame() {
        loadProperties();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        RequestPanel = new javax.swing.JPanel();
        NomLabel = new javax.swing.JLabel();
        NomTF = new javax.swing.JTextField();
        PINLabel = new javax.swing.JLabel();
        PINTF = new javax.swing.JPasswordField();
        EmptyPanel = new javax.swing.JPanel();
        AuthButton = new javax.swing.JButton();
        AnswerPanel = new javax.swing.JPanel();
        NomBanqueLabel = new javax.swing.JLabel();
        NomBanqueTF = new javax.swing.JTextField();
        NomClientLabel = new javax.swing.JLabel();
        NomClientTF = new javax.swing.JTextField();
        NumSerieLabel = new javax.swing.JLabel();
        NumSerieTF = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Authentification");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        RequestPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        RequestPanel.setLayout(new java.awt.GridLayout(3, 2, 5, 5));

        NomLabel.setText("Identifiant");
        NomLabel.setMaximumSize(new java.awt.Dimension(150, 16));
        NomLabel.setMinimumSize(new java.awt.Dimension(150, 16));
        NomLabel.setPreferredSize(new java.awt.Dimension(150, 16));
        RequestPanel.add(NomLabel);
        RequestPanel.add(NomTF);

        PINLabel.setText("PIN");
        RequestPanel.add(PINLabel);
        RequestPanel.add(PINTF);

        javax.swing.GroupLayout EmptyPanelLayout = new javax.swing.GroupLayout(EmptyPanel);
        EmptyPanel.setLayout(EmptyPanelLayout);
        EmptyPanelLayout.setHorizontalGroup(
            EmptyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );
        EmptyPanelLayout.setVerticalGroup(
            EmptyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        RequestPanel.add(EmptyPanel);

        AuthButton.setText("Authentification");
        AuthButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AuthButtonActionPerformed(evt);
            }
        });
        RequestPanel.add(AuthButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        getContentPane().add(RequestPanel, gridBagConstraints);

        AnswerPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        AnswerPanel.setLayout(new java.awt.GridLayout(3, 2, 5, 5));

        NomBanqueLabel.setText("Nom de la banque");
        NomBanqueLabel.setMaximumSize(new java.awt.Dimension(150, 16));
        NomBanqueLabel.setMinimumSize(new java.awt.Dimension(150, 16));
        NomBanqueLabel.setPreferredSize(new java.awt.Dimension(150, 16));
        AnswerPanel.add(NomBanqueLabel);

        NomBanqueTF.setEditable(false);
        AnswerPanel.add(NomBanqueTF);

        NomClientLabel.setText("Nom du client");
        AnswerPanel.add(NomClientLabel);

        NomClientTF.setEditable(false);
        AnswerPanel.add(NomClientTF);

        NumSerieLabel.setText("Numéro de série");
        AnswerPanel.add(NumSerieLabel);

        NumSerieTF.setEditable(false);
        AnswerPanel.add(NumSerieTF);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        getContentPane().add(AnswerPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AuthButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthButtonActionPerformed
        try {
            //Vérification des paramètres
            String nom = NomTF.getText();
            String pin = new String(PINTF.getPassword());
            if(nom.length()==0||pin.length()!=4){
                System.out.println("Input incorrect");
                JFrame f = new JFrame();
                JOptionPane.showMessageDialog(f,"Veuillez introduire des données dans le bon format","",JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            //Connexion au serveur sur le port non SSL
            System.out.println("Connexion au serveur " + serverIP + " sur le port non-SSL " + port); 
            cliSock = new Socket(serverIP,port);
            ois = new ObjectInputStream(cliSock.getInputStream());
            oos = new ObjectOutputStream(cliSock.getOutputStream());
            
            //Réception du premier packet indiquant le port SSL éventuel
            System.out.println("Réception du premier packet indiquant le port SSL éventuel");
            String isSsl = ois.readUTF();
            System.out.println("SSL - " + isSsl);
            if(!isSsl.equals("no-SSL")){
                int portSSL = Integer.parseInt(isSsl.substring(isSsl.lastIndexOf("#")+1));
                SSLSocketFactory SslSFac = CertFile.getSSLClientSocketFactory(certFileLocation,certFilePassword,certFileKeyPassword);
                SSLSocket SslSocket = (SSLSocket) SslSFac.createSocket(serverIP, portSSL);
                ois = new ObjectInputStream(SslSocket.getInputStream());
                oos = new ObjectOutputStream(SslSocket.getOutputStream());
            }
            
            //Envoie de la requête
            System.out.println("Envoie de la requête");
            Date date = new Date();
            DateFormat df = new SimpleDateFormat("dd/MM/yyy");
            
            String sDate = df.format(date);
            byte[] digest = makeDigest(sDate,nom,pin);
            
            System.out.println("Nom = " + nom);
            System.out.println("Date = " + sDate);
            System.out.println("PIN = " + pin);
            String chargeUtile = nom + "#" + sDate;
            
            RequeteAuth req = new RequeteAuth(RequeteAuth.REQUEST_AUTH,chargeUtile,digest);  
            oos.writeObject(req);
            oos.flush();
            
            // Lecture de la réponse      
            System.out.println("Lecture de la réponse");
            ReponseAuth rep = (ReponseAuth)ois.readObject();
            System.out.println("Reponse reçue : " + rep.getChargeUtile());
            
            if(rep.getCode()==ReponseAuth.AUTH_OK){
                String repdata = rep.getChargeUtile();
                StringTokenizer tokenizer = new StringTokenizer(repdata,"#");

                String nomBanque = tokenizer.nextToken();
                String nomC = tokenizer.nextToken();
                String serial = tokenizer.nextToken();
                NomBanqueTF.setText(nomBanque);
                NomClientTF.setText(nomC);
                NumSerieTF.setText(serial);
                
            }else{
                JFrame f = new JFrame();
                JOptionPane.showMessageDialog(f,"Authentification refusée","",JOptionPane.ERROR_MESSAGE);
            }
            
            //LReponse.setText(rep.getChargeUtile());
        } catch (IOException ex) {
            System.err.println("[ClientFrame : AuthButtonActionPerformed] IOException - " + ex);
        } catch (ClassNotFoundException ex) {
            System.err.println("[ClientFrame : AuthButtonActionPerformed] ClassNotFoundException - " + ex);
        }

    }//GEN-LAST:event_AuthButtonActionPerformed

    private byte[] makeDigest(String date, String nom, String pin){
        try {
            MessageDigest md = MessageDigest.getInstance("SHA");
            md.update(nom.getBytes());
            md.update(date.getBytes());
            md.update(pin.getBytes());
            byte[] digest = md.digest();
            return digest;
        } catch (NoSuchAlgorithmException ex) {
            System.err.println("[ClientFrame : makeDigest] NoSuchAlgorithmException - " + ex);
        }
        return null;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AnswerPanel;
    private javax.swing.JButton AuthButton;
    private javax.swing.JPanel EmptyPanel;
    private javax.swing.JLabel NomBanqueLabel;
    private javax.swing.JTextField NomBanqueTF;
    private javax.swing.JLabel NomClientLabel;
    private javax.swing.JTextField NomClientTF;
    private javax.swing.JLabel NomLabel;
    private javax.swing.JTextField NomTF;
    private javax.swing.JLabel NumSerieLabel;
    private javax.swing.JTextField NumSerieTF;
    private javax.swing.JLabel PINLabel;
    private javax.swing.JPasswordField PINTF;
    private javax.swing.JPanel RequestPanel;
    // End of variables declaration//GEN-END:variables

    private void loadProperties() {
        File clientFramePropertiesFile = new File(clientFramePropertiesPath);
        InputStream input = null;
        try {
            input = new FileInputStream(clientFramePropertiesFile);
            Properties prop = new Properties();
            prop.load(input);
            serverIP = prop.getProperty("serverIP");
            port = Integer.parseInt(prop.getProperty("port"));
            certFileLocation = prop.getProperty("certFileLocation");
            certFilePassword = prop.getProperty("certFilePassword");
            certFileKeyPassword = prop.getProperty("certFileKeyPassword");
        } catch (FileNotFoundException ex) {
            System.err.println("[ClientFrame : loadProperties] FileNotFoundException - " + ex);
        } catch (IOException ex) {
            System.err.println("[ClientFrame : loadProperties] IOException - " + ex);
        } finally {
            try {
                input.close();
            } catch (IOException ex) {
                System.err.println("[ClientFrame : loadProperties] IOException - " + ex);
            }
        }
    }
}
