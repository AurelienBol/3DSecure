package pkg3dsecure.Client;

import CertFile.CertFile;
import Reqpay.ReponsePay;
import Reqpay.RequetePay;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.Properties;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Aurélien Bolkaerts
 */
public class TransactionFrame extends javax.swing.JFrame {
    private final String clientFramePropertiesPath = "src\\pkg3dsecure\\Client\\TransactionFrame.properties";
    //Variables lues dans le fichier ClientFrame.properties
    private String serverIP;
    private int port;
    private String certFileLocation;
    private String certFilePassword;
    private String certFileKeyPassword;
    
    
    private ObjectInputStream ois;
    private ObjectOutputStream oos;
    private Socket cliSock;
    
    public TransactionFrame() {
        loadProperties();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        Source = new javax.swing.JLabel();
        SourceTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        DestinationTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        MontantSpinner = new javax.swing.JSpinner();
        JButtonOk = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Demande de transaction");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        Source.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Source.setText("Source :");
        Source.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(Source, gridBagConstraints);

        SourceTextField.setMinimumSize(new java.awt.Dimension(200, 22));
        SourceTextField.setPreferredSize(new java.awt.Dimension(200, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        getContentPane().add(SourceTextField, gridBagConstraints);

        jLabel2.setText("Destination :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(jLabel2, gridBagConstraints);

        DestinationTextField.setMinimumSize(new java.awt.Dimension(200, 22));
        DestinationTextField.setPreferredSize(new java.awt.Dimension(200, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        getContentPane().add(DestinationTextField, gridBagConstraints);

        jLabel3.setText("Montant : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(jLabel3, gridBagConstraints);

        MontantSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, null, 1.0d));
        MontantSpinner.setMinimumSize(new java.awt.Dimension(200, 22));
        MontantSpinner.setPreferredSize(new java.awt.Dimension(200, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        getContentPane().add(MontantSpinner, gridBagConstraints);

        JButtonOk.setText("Ok");
        JButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JButtonOkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        getContentPane().add(JButtonOk, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Demande de transaction");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        getContentPane().add(jLabel4, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JButtonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JButtonOkActionPerformed
        try{
            //Vérification des champs
            if(SourceTextField.getText().length()!=8 || DestinationTextField.getText().length()!=8){
                JFrame f = new JFrame();
                JOptionPane.showMessageDialog(f,"Veuillez introduire des données dans le bon format","",JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            //Connexion au serveur sur le port non SSL
             System.out.println("Connexion au serveur " + serverIP + " sur le port non-SSL " + port); 

            
            cliSock = new Socket(serverIP,port);
            ois = new ObjectInputStream(cliSock.getInputStream());
            oos = new ObjectOutputStream(cliSock.getOutputStream());
            
            //Réception du premier packet indiquant le port SSL éventuel
            System.out.println("Réception du premier packet indiquant le port SSL éventuel");
            String isSsl = ois.readUTF();
            System.out.println("SSL - " + isSsl);
            
            if(!isSsl.equals("no-SSL")){
                int portSSL = Integer.parseInt(isSsl.substring(isSsl.lastIndexOf("#")+1));
                SSLSocketFactory SslSFac = CertFile.getSSLClientSocketFactory(certFileLocation,certFilePassword,certFileKeyPassword);
                SSLSocket SslSocket = (SSLSocket) SslSFac.createSocket(serverIP, portSSL);
                ois = new ObjectInputStream(SslSocket.getInputStream());
                oos = new ObjectOutputStream(SslSocket.getOutputStream());
            }
            
            //Envoie de la requête
            System.out.println("Envoie de la requête");
            String source = SourceTextField.getText();
            String destination = DestinationTextField.getText();
            double montant = (double) MontantSpinner.getValue();
            String chargeUtile = source + "#"+destination;
            RequetePay req= new RequetePay(RequetePay.REQUEST_PAY,chargeUtile, montant);

            oos.writeObject(req);
            oos.flush();
            
            // Lecture de la réponse      
            System.out.println("Lecture de la réponse");
            ReponsePay rep = (ReponsePay)ois.readObject();
            System.out.println("Reponse reçue : " + rep.getChargeUtile());
            if(rep.getCode()==ReponsePay.PAY_OK){
                JFrame f = new JFrame();
                JOptionPane.showMessageDialog(f,"Transaction effectuée avec succès","Félicitation!",JOptionPane.WARNING_MESSAGE);
            }else{
                JFrame f = new JFrame();
                JOptionPane.showMessageDialog(f,"Echec de la transaction","Pas Félicitation!",JOptionPane.ERROR_MESSAGE);
            }
            
            //LReponse.setText(rep.getChargeUtile());
        } catch (IOException ex) {
            System.err.println("[TransactionFrame : JButtonOkActionPerformed] IOException - " + ex);
        } catch (ClassNotFoundException ex) {
            System.err.println("[TransactionFrame : JButtonOkActionPerformed] ClassNotFoundException - " + ex);
        }
    }//GEN-LAST:event_JButtonOkActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TransactionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TransactionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TransactionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TransactionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TransactionFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField DestinationTextField;
    private javax.swing.JButton JButtonOk;
    private javax.swing.JSpinner MontantSpinner;
    private javax.swing.JLabel Source;
    private javax.swing.JTextField SourceTextField;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    
    private void loadProperties() { 
       File clientFramePropertiesFile = new File(clientFramePropertiesPath);
        InputStream input = null;
        try {
            input = new FileInputStream(clientFramePropertiesFile);
            Properties prop = new Properties();
            prop.load(input);
            serverIP = prop.getProperty("serverIP");
            port = Integer.parseInt(prop.getProperty("port"));
            certFileLocation = prop.getProperty("certFileLocation");
            certFilePassword = prop.getProperty("certFilePassword");
            certFileKeyPassword = prop.getProperty("certFileKeyPassword");
        } catch (FileNotFoundException ex) {
            System.err.println("[TransactionFrame : loadProperties] FileNotFoundException - " + ex);
        } catch (IOException ex) {
            System.err.println("[TransactionFrame : loadProperties] IOException - " + ex);
        } finally {
            try {
                input.close();
            } catch (IOException ex) {
                System.err.println("[TransactionFrame : loadProperties] IOException - " + ex);
            }
        }
    }

}
